package proxy;

import java.lang.reflect.Method;

import net.sf.cglib.proxy.Enhancer;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;

/**
 * 子类代理
 * 
 * @author 50448
 * 
 */
public class TargetProxyCglib implements MethodInterceptor {
	private TargetInterface target;

	public TargetProxyCglib(TargetInterface target) {
		this.target = target;

	}

	public Object createProxy() {
		// 1.工具类
		Enhancer en = new Enhancer();
		// 2.设置父类
		en.setSuperclass(target.getClass());
		// 3.设置回调函数
		en.setCallback(this);
		// 4.创建子类(代理对象)
		return en.create();
	}

	public Object intercept(Object arg0, Method arg1, Object[] arg2,
			MethodProxy arg3) throws Throwable {
		System.out.println("pefore do business");
		arg1.invoke(arg0,arg1);
		System.out.println("after do business");
		return null;
	}

}
